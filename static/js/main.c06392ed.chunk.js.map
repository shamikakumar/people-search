{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","people","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredPeople","filter","person","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8OAceA,EAZF,SAACC,GACV,OACI,yBAAKC,UAAU,kDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,eACrB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCgBXC,EArBE,SAAC,GACjB,IADkBC,EACnB,EADmBA,OAGf,OACI,6BAEAA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCJtBO,EATG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,yBAAKd,UAAU,OACX,2BAAOA,UAAW,kCAClBe,KAAK,SAASC,YAAY,SAASC,SAAUH,MCI1CI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC9DvB,EAAMwB,WC0CJC,G,wDAxCX,aACC,IAAD,8BACI,gBAiBJC,eAAiB,SAACC,GACV,EAAKC,SAAS,CAACd,YAAca,EAAME,OAAOC,SAjB9C,EAAKC,MAAQ,CACTvB,OAAO,GACPM,YAAY,IAJpB,E,gEASoB,IAAD,OACfkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OACVA,EAASC,UACZF,MAAK,SAAAG,GAAK,OACP,EAAKR,SAAS,CAACpB,OAAO4B,S,+BAQrB,IAAD,EACyBC,KAAKN,MAA3BvB,EADH,EACGA,OAAOM,EADV,EACUA,YACRwB,EAAiB9B,EAAO+B,QAAQ,SAAAC,GACtC,OAAOA,EAAOnC,KAAKoC,cAAcC,SAAS5B,EAAY2B,kBAEtD,OACI,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWc,aAAcsB,KAAKX,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GAlCnBK,cCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c06392ed.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return(\n        <div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow5\">\n            <img alt=\"people\" src={`https://robohash.org/${props.id}?set=set5`}/>\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({people}) =>\n{   \n\n    return(\n        <div>\n        {\n        people.map((user,i) => {\n            return (\n                <Card \n                    key={i} \n                    id={people[i].id} \n                    name={people[i].name} \n                    email={people[i].email}\n                />\n            );\n        })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input className =\"pa3 ba b--blue bg-lightest-blue\"\n            type=\"search\" placeholder=\"search\" onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nclass App extends  Component {\n    constructor()\n    {   \n        super();\n        this.state = {\n            people:[],\n            searchfield:''\n    \n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>\n            response.json())\n        .then(users=>\n            this.setState({people:users})\n        );\n    }\n\n    onSearchChange = (event) =>{\n            this.setState({searchfield : event.target.value})\n    }\n\n    render(){\n        const {people,searchfield} = this.state;\n        const filteredPeople = people.filter( person =>{\n        return person.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return(\n            <div className=\"tc\">\n                <h1 className=\"f1\">People Search</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <CardList people={filteredPeople}/>\n                </Scroll>\n            </div>\n         );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}